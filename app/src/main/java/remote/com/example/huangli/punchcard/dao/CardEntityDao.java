package remote.com.example.huangli.punchcard.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import remote.com.example.huangli.punchcard.dao.CardEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CARD_ENTITY.
*/
public class CardEntityDao extends AbstractDao<CardEntity, Void> {

    public static final String TABLENAME = "CARD_ENTITY";

    /**
     * Properties of entity CardEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Key = new Property(0, String.class, "key", false, "KEY");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Describe = new Property(2, String.class, "describe", false, "DESCRIBE");
        public final static Property Taskscontent = new Property(3, String.class, "taskscontent", false, "TASKSCONTENT");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "NICK_NAME");
    };


    public CardEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CardEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CARD_ENTITY' (" + //
                "'KEY' TEXT NOT NULL ," + // 0: key
                "'TYPE' TEXT NOT NULL ," + // 1: type
                "'DESCRIBE' TEXT NOT NULL ," + // 2: describe
                "'TASKSCONTENT' TEXT NOT NULL ," + // 3: taskscontent
                "'NICK_NAME' TEXT NOT NULL );"); // 4: nickName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CARD_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CardEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getKey());
        stmt.bindString(2, entity.getType());
        stmt.bindString(3, entity.getDescribe());
        stmt.bindString(4, entity.getTaskscontent());
        stmt.bindString(5, entity.getNickName());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public CardEntity readEntity(Cursor cursor, int offset) {
        CardEntity entity = new CardEntity( //
            cursor.getString(offset + 0), // key
            cursor.getString(offset + 1), // type
            cursor.getString(offset + 2), // describe
            cursor.getString(offset + 3), // taskscontent
            cursor.getString(offset + 4) // nickName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CardEntity entity, int offset) {
        entity.setKey(cursor.getString(offset + 0));
        entity.setType(cursor.getString(offset + 1));
        entity.setDescribe(cursor.getString(offset + 2));
        entity.setTaskscontent(cursor.getString(offset + 3));
        entity.setNickName(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(CardEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(CardEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
