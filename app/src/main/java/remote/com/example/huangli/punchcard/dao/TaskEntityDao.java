package remote.com.example.huangli.punchcard.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import remote.com.example.huangli.punchcard.dao.TaskEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TASK_ENTITY.
*/
public class TaskEntityDao extends AbstractDao<TaskEntity, String> {

    public static final String TABLENAME = "TASK_ENTITY";

    /**
     * Properties of entity TaskEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Num = new Property(0, String.class, "num", true, "NUM");
        public final static Property Describe = new Property(1, String.class, "describe", false, "DESCRIBE");
        public final static Property IsComplated = new Property(2, boolean.class, "isComplated", false, "IS_COMPLATED");
        public final static Property RemindDays = new Property(3, String.class, "remindDays", false, "REMIND_DAYS");
    };


    public TaskEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TaskEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TASK_ENTITY' (" + //
                "'NUM' TEXT PRIMARY KEY NOT NULL ," + // 0: num
                "'DESCRIBE' TEXT NOT NULL ," + // 1: describe
                "'IS_COMPLATED' INTEGER NOT NULL ," + // 2: isComplated
                "'REMIND_DAYS' TEXT NOT NULL );"); // 3: remindDays
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TASK_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TaskEntity entity) {
        stmt.clearBindings();
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(1, num);
        }
        stmt.bindString(2, entity.getDescribe());
        stmt.bindLong(3, entity.getIsComplated() ? 1l: 0l);
        stmt.bindString(4, entity.getRemindDays());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TaskEntity readEntity(Cursor cursor, int offset) {
        TaskEntity entity = new TaskEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // num
            cursor.getString(offset + 1), // describe
            cursor.getShort(offset + 2) != 0, // isComplated
            cursor.getString(offset + 3) // remindDays
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TaskEntity entity, int offset) {
        entity.setNum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDescribe(cursor.getString(offset + 1));
        entity.setIsComplated(cursor.getShort(offset + 2) != 0);
        entity.setRemindDays(cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TaskEntity entity, long rowId) {
        return entity.getNum();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TaskEntity entity) {
        if(entity != null) {
            return entity.getNum();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
