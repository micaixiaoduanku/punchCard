package remote.com.example.huangli.punchcard.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import remote.com.example.huangli.punchcard.dao.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_ENTITY.
*/
public class UserEntityDao extends AbstractDao<UserEntity, String> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Account = new Property(0, String.class, "account", true, "ACCOUNT");
        public final static Property Passoword = new Property(1, String.class, "passoword", false, "PASSOWORD");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property Signature = new Property(3, String.class, "signature", false, "SIGNATURE");
        public final static Property Lv = new Property(4, int.class, "lv", false, "LV");
        public final static Property CurProgress = new Property(5, int.class, "curProgress", false, "CUR_PROGRESS");
    };


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_ENTITY' (" + //
                "'ACCOUNT' TEXT PRIMARY KEY NOT NULL ," + // 0: account
                "'PASSOWORD' TEXT NOT NULL ," + // 1: passoword
                "'NICKNAME' TEXT NOT NULL ," + // 2: nickname
                "'SIGNATURE' TEXT NOT NULL ," + // 3: signature
                "'LV' INTEGER NOT NULL ," + // 4: lv
                "'CUR_PROGRESS' INTEGER NOT NULL );"); // 5: curProgress
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(1, account);
        }
        stmt.bindString(2, entity.getPassoword());
        stmt.bindString(3, entity.getNickname());
        stmt.bindString(4, entity.getSignature());
        stmt.bindLong(5, entity.getLv());
        stmt.bindLong(6, entity.getCurProgress());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // account
            cursor.getString(offset + 1), // passoword
            cursor.getString(offset + 2), // nickname
            cursor.getString(offset + 3), // signature
            cursor.getInt(offset + 4), // lv
            cursor.getInt(offset + 5) // curProgress
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setAccount(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPassoword(cursor.getString(offset + 1));
        entity.setNickname(cursor.getString(offset + 2));
        entity.setSignature(cursor.getString(offset + 3));
        entity.setLv(cursor.getInt(offset + 4));
        entity.setCurProgress(cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserEntity entity, long rowId) {
        return entity.getAccount();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getAccount();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
